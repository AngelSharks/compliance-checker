language: python

sudo: false

matrix:
  fast_finish: true
  include:
    - name: "default-python3"
      env: TEST_TARGET=default PY=3.8
    - name: "integration-python3"
      env: TEST_TARGET=integration PY=3.8
    - name: "coding_standards"
      env: TEST_TARGET=coding_standards PY=3.8
    - name: "glider plugin"
      env: TEST_TARGET=cc-plugin-glider PY=3.8
    - name: "ncei plugin"
      env: TEST_TARGET=cc-plugin-ncei PY=3.8
    - name: "sgrid plugin"
      env: TEST_TARGET=cc-plugin-sgrid PY=3.8
    - name: "ugrid plugin"
      env: TEST_TARGET=cc-checker-ugrid PY=3.8
  allow_failures:
    - name: "integration-python3"
      env: TEST_TARGET=integration PY=3.8
    - name: "coding_standards"
      env: TEST_TARGET=coding_standards PY=3.8
    - name: "glider plugin"
      env: TEST_TARGET=cc-plugin-glider PY=3.8
    - name: "ncei plugin"
      env: TEST_TARGET=cc-plugin-ncei PY=3.8
    - name: "sgrid plugin"
      env: TEST_TARGET=cc-plugin-sgrid PY=3.8
    - name: "ugrid plugin"
      env: TEST_TARGET=cc-checker-ugrid PY=3.8

before_install:
  # Install miniconda and create TEST env.
  - |
    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
    bash miniconda.sh -b -p $HOME/miniconda
    export PATH="$HOME/miniconda/bin:$PATH"
    conda config --set always_yes yes --set changeps1 no --set show_channel_urls true
    conda update conda --quiet
    conda config --add channels conda-forge --force
    conda config --set channel_priority strict
    conda config --set safety_checks disabled
    python gen_conda_requirements.py --groups requirements.txt --py${PY:0:1} > conda-requirements.txt
    conda create --name TEST python=$PY --file conda-requirements.txt --file test_requirements.txt
    source activate TEST

# Test source distribution.
install:
    - python setup.py sdist && version=$(python setup.py --version) && pushd dist  && pip install compliance-checker-${version}.tar.gz --no-deps && popd

script:
  - if [[ $TEST_TARGET == "default" ]]; then
      pytest -k "not integration" -s -rxs -v ;
    fi

  - if [[ $TEST_TARGET == "coding_standards" ]]; then
      flake8 --ignore=E501,E251,E221,E201,E202,E203 -qq --statistics . ;
    fi

  - if [[ $TEST_TARGET == "integration" ]]; then
      pytest -m "integration" -s -rxs -v ;
    fi

  - if [[ $TEST_TARGET == 'cc-plugin-glider' ]]; then
      git clone https://github.com/ioos/cc-plugin-glider.git && cd cc-plugin-glider ;
      conda install --file requirements.txt --file requirements-dev.txt ;
      pytest -s -rxs -v ;
    fi

  - if [[ $TEST_TARGET == 'cc-plugin-ncei' ]]; then
      git clone https://github.com/ioos/cc-plugin-ncei.git && cd cc-plugin-ncei ;
      conda install --file requirements.txt --file requirements-dev.txt ;
      pytest -s -rxs -v ;
    fi

  - if [[ $TEST_TARGET == 'cc-plugin-sgrid' ]]; then
      git clone https://github.com/ioos/cc-plugin-sgrid.git && cd cc-plugin-sgrid ;
      conda install --file requirements.txt --file requirements-dev.txt ;
      pytest -s -rxs -v ;
    fi

  - if [[ $TEST_TARGET == 'cc-checker-ugrid' ]]; then
      git clone https://github.com/ioos/cc-checker-ugrid.git && cd cc-checker-ugrid ;
      conda install --file requirements.txt --file requirements-dev.txt ;
      pytest -s -rxs -v ;
    fi
